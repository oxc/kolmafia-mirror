<project name="KoLmafia" default="rejar" basedir=".">


  <!-- ========================================== -->
  <!--  set the global properties for this build  -->
  <!-- ========================================== -->

  <property name="root" location="."/>
  <property name="src" location="src"/>
  <property name="lib" location="lib"/>
  <property name="build" location="build"/>
  <property name="dist" location="dist"/>
  <property name="docs" location="${dist}/docs"/>

  <property name="jarfile" location="${dist}/${ant.project.name}.jar"/>
  <property name="tarfile" location="${dist}/${ant.project.name}.tar.gz"/>
  <property name="main-class" value="net.sourceforge.kolmafia.KoLmafia"/>


<!-- ============================================================================== -->
  <!--  set the timestamp, and create directories that will be used by other targets  -->
  <!-- ============================================================================== -->

  <target name="init"
          description="set the timestamp, and create directories that will be used by other targets">

    <tstamp/>
    <mkdir dir="${build}"/>
    <mkdir dir="${dist}"/>

  </target>


  <!-- ============================================= -->
  <!--  compile the source and assemble other files  -->
  <!-- ============================================= -->

  <target name="compile"
          depends="init"
          description="compile the source and assemble other files">

    <javac source="1.4"
           srcdir="${src}"
           destdir="${build}"
           classpath="${lib}/*.jar" />

    <copy todir="${build}" preservelastmodified="true">
       <fileset dir="${src}">
          <exclude name="**/*.java"/>
       </fileset>
    </copy>

    <copy todir="${build}" preservelastmodified="true">
       <fileset dir="${lib}"/>
    </copy>

  </target>

  <!-- ================================== -->
  <!--  generate the TAR of source files  -->
  <!-- ================================== -->

  <target name="createtar"
          description="generate the TAR of source files">

    <ant target="init"/>

    <tar destfile="${tarfile}"
         basedir="${root}"
         compression="gzip">

       <exclude name="CVS/**"/>
       <exclude name="build/**"/>
       <exclude name="dist/**"/>
       <exclude name="www/data/**"/>

    </tar>

  </target>


  <!-- ================================== -->
  <!--  generate the executable JAR file  -->
  <!-- ================================== -->

  <target name="createjar"
          depends="compile"
          description="generate the executable JAR file">

    <jar destfile="${jarfile}"
         basedir="${build}"
         update="true"
         index="yes">

      <manifest>
        <attribute name="Main-Class" value="${main-class}"/>
      </manifest>

    </jar>

  </target>


  <!-- =========================== -->
  <!--  generate the distribution  -->
  <!-- =========================== -->

  <target name="dist"
          depends="rejar,createtar"
          description="generate the distribution">

  </target>


  <!-- ======================================= -->
  <!--  generate the javadocs from sourcecode  -->
  <!-- ======================================= -->

  <target name="javadoc"
          depends="compile"
          description="generate javadocs from sourcecode">

    <mkdir dir="${docs}"/>
    <mkdir dir="${docs}/api"/>

    <javadoc sourcepath="${src}"
             destdir="${docs}"
             packagenames="*">

       <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>

       <classpath>
          <pathelement location="${lib}"/>
          <pathelement location="${build}"/>
       </classpath>

    </javadoc>

  </target>


  <!-- ================================================================================== -->
  <!--  runs program with all needed libraries in the path (avoids UnsatisfiedLinkError)  -->
  <!-- ================================================================================== -->

  <target name="exec"
          depends="createjar"
          description="runs program with all needed libraries in the path (avoids UnsatisfiedLinkError)">

    <java fork="true" jar="${jarfile}" dir="${dist}">
        <env key="PATH" path="${lib}/:${java.library.path}"/>
        <env key="Path" path="${lib}/:${java.library.path}"/>
    </java>

  </target>


  <!-- =========================== -->
  <!--  clean up all object files  -->
  <!-- =========================== -->

  <target name="clean"
          description="clean up all object files">

    <delete dir="${build}"/>
    <delete dir="${docs}"/>
    <delete file="${jarfile}"/>
    <delete file="${tarfile}"/>

  </target>


  <!-- ========================================= -->
  <!--  recompiles the project from clean state  -->
  <!-- ========================================= -->

  <target name="recompile"
          description="recompiles the project from clean state">

     <ant target="clean"/>
     <ant target="compile"/>

  </target>

  <!-- =================================================== -->
  <!--  generate the executable JAR file from clean state  -->
  <!-- =================================================== -->

  <target name="rejar"
          depends="recompile,createjar"
          description="generate the executable JAR file from clean state">

  </target>

</project>
